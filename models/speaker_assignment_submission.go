// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e "time"
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type SpeakerAssignmentSubmission struct {
    Entity
}
// NewSpeakerAssignmentSubmission instantiates a new SpeakerAssignmentSubmission and sets the default values.
func NewSpeakerAssignmentSubmission()(*SpeakerAssignmentSubmission) {
    m := &SpeakerAssignmentSubmission{
        Entity: *NewEntity(),
    }
    return m
}
// CreateSpeakerAssignmentSubmissionFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateSpeakerAssignmentSubmissionFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewSpeakerAssignmentSubmission(), nil
}
// GetAssignmentId gets the assignmentId property value. ID of the assignment with which this submission is associated.
// returns a *string when successful
func (m *SpeakerAssignmentSubmission) GetAssignmentId()(*string) {
    val, err := m.GetBackingStore().Get("assignmentId")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetAverageWordsPerMinutePace gets the averageWordsPerMinutePace property value. The average speaking pace of the student, measured in words per minute.
// returns a *int64 when successful
func (m *SpeakerAssignmentSubmission) GetAverageWordsPerMinutePace()(*int64) {
    val, err := m.GetBackingStore().Get("averageWordsPerMinutePace")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// GetClassId gets the classId property value. ID of the class this speaker progress is associated with.
// returns a *string when successful
func (m *SpeakerAssignmentSubmission) GetClassId()(*string) {
    val, err := m.GetBackingStore().Get("classId")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *SpeakerAssignmentSubmission) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["assignmentId"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAssignmentId(val)
        }
        return nil
    }
    res["averageWordsPerMinutePace"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAverageWordsPerMinutePace(val)
        }
        return nil
    }
    res["classId"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetClassId(val)
        }
        return nil
    }
    res["fillerWordsOccurrencesCount"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetFillerWordsOccurrencesCount(val)
        }
        return nil
    }
    res["incorrectCameraDistanceOccurrencesCount"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetIncorrectCameraDistanceOccurrencesCount(val)
        }
        return nil
    }
    res["lengthOfSubmissionInSeconds"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLengthOfSubmissionInSeconds(val)
        }
        return nil
    }
    res["lostEyeContactOccurrencesCount"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLostEyeContactOccurrencesCount(val)
        }
        return nil
    }
    res["monotoneOccurrencesCount"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMonotoneOccurrencesCount(val)
        }
        return nil
    }
    res["nonInclusiveLanguageOccurrencesCount"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetNonInclusiveLanguageOccurrencesCount(val)
        }
        return nil
    }
    res["obstructedViewOccurrencesCount"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetObstructedViewOccurrencesCount(val)
        }
        return nil
    }
    res["repetitiveLanguageOccurrencesCount"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetRepetitiveLanguageOccurrencesCount(val)
        }
        return nil
    }
    res["studentId"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetStudentId(val)
        }
        return nil
    }
    res["submissionDateTime"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSubmissionDateTime(val)
        }
        return nil
    }
    res["submissionId"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSubmissionId(val)
        }
        return nil
    }
    res["topFillerWords"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfPrimitiveValues("string")
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]string, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = *(v.(*string))
                }
            }
            m.SetTopFillerWords(res)
        }
        return nil
    }
    res["topMispronouncedWords"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfPrimitiveValues("string")
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]string, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = *(v.(*string))
                }
            }
            m.SetTopMispronouncedWords(res)
        }
        return nil
    }
    res["topNonInclusiveWordsAndPhrases"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfPrimitiveValues("string")
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]string, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = *(v.(*string))
                }
            }
            m.SetTopNonInclusiveWordsAndPhrases(res)
        }
        return nil
    }
    res["topRepetitiveWordsAndPhrases"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfPrimitiveValues("string")
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]string, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = *(v.(*string))
                }
            }
            m.SetTopRepetitiveWordsAndPhrases(res)
        }
        return nil
    }
    res["wordsSpokenCount"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetWordsSpokenCount(val)
        }
        return nil
    }
    return res
}
// GetFillerWordsOccurrencesCount gets the fillerWordsOccurrencesCount property value. The number of times the student was flagged by Speaker Coach for using a filler word.
// returns a *int64 when successful
func (m *SpeakerAssignmentSubmission) GetFillerWordsOccurrencesCount()(*int64) {
    val, err := m.GetBackingStore().Get("fillerWordsOccurrencesCount")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// GetIncorrectCameraDistanceOccurrencesCount gets the incorrectCameraDistanceOccurrencesCount property value. The number of times the student was flagged by Speaker Coach for being either too close or too far away from the camera.
// returns a *int64 when successful
func (m *SpeakerAssignmentSubmission) GetIncorrectCameraDistanceOccurrencesCount()(*int64) {
    val, err := m.GetBackingStore().Get("incorrectCameraDistanceOccurrencesCount")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// GetLengthOfSubmissionInSeconds gets the lengthOfSubmissionInSeconds property value. The length of the student submission in seconds.
// returns a *float64 when successful
func (m *SpeakerAssignmentSubmission) GetLengthOfSubmissionInSeconds()(*float64) {
    val, err := m.GetBackingStore().Get("lengthOfSubmissionInSeconds")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*float64)
    }
    return nil
}
// GetLostEyeContactOccurrencesCount gets the lostEyeContactOccurrencesCount property value. The number of times the student was flagged by Speaker Coach for losing eye contact with the camera.
// returns a *int64 when successful
func (m *SpeakerAssignmentSubmission) GetLostEyeContactOccurrencesCount()(*int64) {
    val, err := m.GetBackingStore().Get("lostEyeContactOccurrencesCount")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// GetMonotoneOccurrencesCount gets the monotoneOccurrencesCount property value. The number of times the student was flagged by Speaker Coach for speaking in monotone.
// returns a *int64 when successful
func (m *SpeakerAssignmentSubmission) GetMonotoneOccurrencesCount()(*int64) {
    val, err := m.GetBackingStore().Get("monotoneOccurrencesCount")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// GetNonInclusiveLanguageOccurrencesCount gets the nonInclusiveLanguageOccurrencesCount property value. The number of times the student was flagged by Speaker Coach for using non-inclusive or sensitive language.
// returns a *int64 when successful
func (m *SpeakerAssignmentSubmission) GetNonInclusiveLanguageOccurrencesCount()(*int64) {
    val, err := m.GetBackingStore().Get("nonInclusiveLanguageOccurrencesCount")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// GetObstructedViewOccurrencesCount gets the obstructedViewOccurrencesCount property value. The number of times the student was flagged by Speaker Coach for obstructing the view of their face.
// returns a *int64 when successful
func (m *SpeakerAssignmentSubmission) GetObstructedViewOccurrencesCount()(*int64) {
    val, err := m.GetBackingStore().Get("obstructedViewOccurrencesCount")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// GetRepetitiveLanguageOccurrencesCount gets the repetitiveLanguageOccurrencesCount property value. The number of times the student was flagged by Speaker Coach for using repetitive language.
// returns a *int64 when successful
func (m *SpeakerAssignmentSubmission) GetRepetitiveLanguageOccurrencesCount()(*int64) {
    val, err := m.GetBackingStore().Get("repetitiveLanguageOccurrencesCount")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// GetStudentId gets the studentId property value. ID of the user this speaker progress is associated with.
// returns a *string when successful
func (m *SpeakerAssignmentSubmission) GetStudentId()(*string) {
    val, err := m.GetBackingStore().Get("studentId")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetSubmissionDateTime gets the submissionDateTime property value. Date and time of the submission this speaker progress is associated with. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
// returns a *Time when successful
func (m *SpeakerAssignmentSubmission) GetSubmissionDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    val, err := m.GetBackingStore().Get("submissionDateTime")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)
    }
    return nil
}
// GetSubmissionId gets the submissionId property value. ID of the submission this speaker progress is associated with.
// returns a *string when successful
func (m *SpeakerAssignmentSubmission) GetSubmissionId()(*string) {
    val, err := m.GetBackingStore().Get("submissionId")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetTopFillerWords gets the topFillerWords property value. The filler words used most by the student.
// returns a []string when successful
func (m *SpeakerAssignmentSubmission) GetTopFillerWords()([]string) {
    val, err := m.GetBackingStore().Get("topFillerWords")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]string)
    }
    return nil
}
// GetTopMispronouncedWords gets the topMispronouncedWords property value. The words mispronounced most by the student.
// returns a []string when successful
func (m *SpeakerAssignmentSubmission) GetTopMispronouncedWords()([]string) {
    val, err := m.GetBackingStore().Get("topMispronouncedWords")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]string)
    }
    return nil
}
// GetTopNonInclusiveWordsAndPhrases gets the topNonInclusiveWordsAndPhrases property value. The non-inclusive or sensitive words and phrases most used by the student.
// returns a []string when successful
func (m *SpeakerAssignmentSubmission) GetTopNonInclusiveWordsAndPhrases()([]string) {
    val, err := m.GetBackingStore().Get("topNonInclusiveWordsAndPhrases")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]string)
    }
    return nil
}
// GetTopRepetitiveWordsAndPhrases gets the topRepetitiveWordsAndPhrases property value. The words and phrases most repeated by the student.
// returns a []string when successful
func (m *SpeakerAssignmentSubmission) GetTopRepetitiveWordsAndPhrases()([]string) {
    val, err := m.GetBackingStore().Get("topRepetitiveWordsAndPhrases")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]string)
    }
    return nil
}
// GetWordsSpokenCount gets the wordsSpokenCount property value. Total number of words spoken by the student in the submission.
// returns a *int64 when successful
func (m *SpeakerAssignmentSubmission) GetWordsSpokenCount()(*int64) {
    val, err := m.GetBackingStore().Get("wordsSpokenCount")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int64)
    }
    return nil
}
// Serialize serializes information the current object
func (m *SpeakerAssignmentSubmission) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteStringValue("assignmentId", m.GetAssignmentId())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("averageWordsPerMinutePace", m.GetAverageWordsPerMinutePace())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("classId", m.GetClassId())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("fillerWordsOccurrencesCount", m.GetFillerWordsOccurrencesCount())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("incorrectCameraDistanceOccurrencesCount", m.GetIncorrectCameraDistanceOccurrencesCount())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteFloat64Value("lengthOfSubmissionInSeconds", m.GetLengthOfSubmissionInSeconds())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("lostEyeContactOccurrencesCount", m.GetLostEyeContactOccurrencesCount())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("monotoneOccurrencesCount", m.GetMonotoneOccurrencesCount())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("nonInclusiveLanguageOccurrencesCount", m.GetNonInclusiveLanguageOccurrencesCount())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("obstructedViewOccurrencesCount", m.GetObstructedViewOccurrencesCount())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("repetitiveLanguageOccurrencesCount", m.GetRepetitiveLanguageOccurrencesCount())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("studentId", m.GetStudentId())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteTimeValue("submissionDateTime", m.GetSubmissionDateTime())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("submissionId", m.GetSubmissionId())
        if err != nil {
            return err
        }
    }
    if m.GetTopFillerWords() != nil {
        err = writer.WriteCollectionOfStringValues("topFillerWords", m.GetTopFillerWords())
        if err != nil {
            return err
        }
    }
    if m.GetTopMispronouncedWords() != nil {
        err = writer.WriteCollectionOfStringValues("topMispronouncedWords", m.GetTopMispronouncedWords())
        if err != nil {
            return err
        }
    }
    if m.GetTopNonInclusiveWordsAndPhrases() != nil {
        err = writer.WriteCollectionOfStringValues("topNonInclusiveWordsAndPhrases", m.GetTopNonInclusiveWordsAndPhrases())
        if err != nil {
            return err
        }
    }
    if m.GetTopRepetitiveWordsAndPhrases() != nil {
        err = writer.WriteCollectionOfStringValues("topRepetitiveWordsAndPhrases", m.GetTopRepetitiveWordsAndPhrases())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt64Value("wordsSpokenCount", m.GetWordsSpokenCount())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAssignmentId sets the assignmentId property value. ID of the assignment with which this submission is associated.
func (m *SpeakerAssignmentSubmission) SetAssignmentId(value *string)() {
    err := m.GetBackingStore().Set("assignmentId", value)
    if err != nil {
        panic(err)
    }
}
// SetAverageWordsPerMinutePace sets the averageWordsPerMinutePace property value. The average speaking pace of the student, measured in words per minute.
func (m *SpeakerAssignmentSubmission) SetAverageWordsPerMinutePace(value *int64)() {
    err := m.GetBackingStore().Set("averageWordsPerMinutePace", value)
    if err != nil {
        panic(err)
    }
}
// SetClassId sets the classId property value. ID of the class this speaker progress is associated with.
func (m *SpeakerAssignmentSubmission) SetClassId(value *string)() {
    err := m.GetBackingStore().Set("classId", value)
    if err != nil {
        panic(err)
    }
}
// SetFillerWordsOccurrencesCount sets the fillerWordsOccurrencesCount property value. The number of times the student was flagged by Speaker Coach for using a filler word.
func (m *SpeakerAssignmentSubmission) SetFillerWordsOccurrencesCount(value *int64)() {
    err := m.GetBackingStore().Set("fillerWordsOccurrencesCount", value)
    if err != nil {
        panic(err)
    }
}
// SetIncorrectCameraDistanceOccurrencesCount sets the incorrectCameraDistanceOccurrencesCount property value. The number of times the student was flagged by Speaker Coach for being either too close or too far away from the camera.
func (m *SpeakerAssignmentSubmission) SetIncorrectCameraDistanceOccurrencesCount(value *int64)() {
    err := m.GetBackingStore().Set("incorrectCameraDistanceOccurrencesCount", value)
    if err != nil {
        panic(err)
    }
}
// SetLengthOfSubmissionInSeconds sets the lengthOfSubmissionInSeconds property value. The length of the student submission in seconds.
func (m *SpeakerAssignmentSubmission) SetLengthOfSubmissionInSeconds(value *float64)() {
    err := m.GetBackingStore().Set("lengthOfSubmissionInSeconds", value)
    if err != nil {
        panic(err)
    }
}
// SetLostEyeContactOccurrencesCount sets the lostEyeContactOccurrencesCount property value. The number of times the student was flagged by Speaker Coach for losing eye contact with the camera.
func (m *SpeakerAssignmentSubmission) SetLostEyeContactOccurrencesCount(value *int64)() {
    err := m.GetBackingStore().Set("lostEyeContactOccurrencesCount", value)
    if err != nil {
        panic(err)
    }
}
// SetMonotoneOccurrencesCount sets the monotoneOccurrencesCount property value. The number of times the student was flagged by Speaker Coach for speaking in monotone.
func (m *SpeakerAssignmentSubmission) SetMonotoneOccurrencesCount(value *int64)() {
    err := m.GetBackingStore().Set("monotoneOccurrencesCount", value)
    if err != nil {
        panic(err)
    }
}
// SetNonInclusiveLanguageOccurrencesCount sets the nonInclusiveLanguageOccurrencesCount property value. The number of times the student was flagged by Speaker Coach for using non-inclusive or sensitive language.
func (m *SpeakerAssignmentSubmission) SetNonInclusiveLanguageOccurrencesCount(value *int64)() {
    err := m.GetBackingStore().Set("nonInclusiveLanguageOccurrencesCount", value)
    if err != nil {
        panic(err)
    }
}
// SetObstructedViewOccurrencesCount sets the obstructedViewOccurrencesCount property value. The number of times the student was flagged by Speaker Coach for obstructing the view of their face.
func (m *SpeakerAssignmentSubmission) SetObstructedViewOccurrencesCount(value *int64)() {
    err := m.GetBackingStore().Set("obstructedViewOccurrencesCount", value)
    if err != nil {
        panic(err)
    }
}
// SetRepetitiveLanguageOccurrencesCount sets the repetitiveLanguageOccurrencesCount property value. The number of times the student was flagged by Speaker Coach for using repetitive language.
func (m *SpeakerAssignmentSubmission) SetRepetitiveLanguageOccurrencesCount(value *int64)() {
    err := m.GetBackingStore().Set("repetitiveLanguageOccurrencesCount", value)
    if err != nil {
        panic(err)
    }
}
// SetStudentId sets the studentId property value. ID of the user this speaker progress is associated with.
func (m *SpeakerAssignmentSubmission) SetStudentId(value *string)() {
    err := m.GetBackingStore().Set("studentId", value)
    if err != nil {
        panic(err)
    }
}
// SetSubmissionDateTime sets the submissionDateTime property value. Date and time of the submission this speaker progress is associated with. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
func (m *SpeakerAssignmentSubmission) SetSubmissionDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    err := m.GetBackingStore().Set("submissionDateTime", value)
    if err != nil {
        panic(err)
    }
}
// SetSubmissionId sets the submissionId property value. ID of the submission this speaker progress is associated with.
func (m *SpeakerAssignmentSubmission) SetSubmissionId(value *string)() {
    err := m.GetBackingStore().Set("submissionId", value)
    if err != nil {
        panic(err)
    }
}
// SetTopFillerWords sets the topFillerWords property value. The filler words used most by the student.
func (m *SpeakerAssignmentSubmission) SetTopFillerWords(value []string)() {
    err := m.GetBackingStore().Set("topFillerWords", value)
    if err != nil {
        panic(err)
    }
}
// SetTopMispronouncedWords sets the topMispronouncedWords property value. The words mispronounced most by the student.
func (m *SpeakerAssignmentSubmission) SetTopMispronouncedWords(value []string)() {
    err := m.GetBackingStore().Set("topMispronouncedWords", value)
    if err != nil {
        panic(err)
    }
}
// SetTopNonInclusiveWordsAndPhrases sets the topNonInclusiveWordsAndPhrases property value. The non-inclusive or sensitive words and phrases most used by the student.
func (m *SpeakerAssignmentSubmission) SetTopNonInclusiveWordsAndPhrases(value []string)() {
    err := m.GetBackingStore().Set("topNonInclusiveWordsAndPhrases", value)
    if err != nil {
        panic(err)
    }
}
// SetTopRepetitiveWordsAndPhrases sets the topRepetitiveWordsAndPhrases property value. The words and phrases most repeated by the student.
func (m *SpeakerAssignmentSubmission) SetTopRepetitiveWordsAndPhrases(value []string)() {
    err := m.GetBackingStore().Set("topRepetitiveWordsAndPhrases", value)
    if err != nil {
        panic(err)
    }
}
// SetWordsSpokenCount sets the wordsSpokenCount property value. Total number of words spoken by the student in the submission.
func (m *SpeakerAssignmentSubmission) SetWordsSpokenCount(value *int64)() {
    err := m.GetBackingStore().Set("wordsSpokenCount", value)
    if err != nil {
        panic(err)
    }
}
type SpeakerAssignmentSubmissionable interface {
    Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetAssignmentId()(*string)
    GetAverageWordsPerMinutePace()(*int64)
    GetClassId()(*string)
    GetFillerWordsOccurrencesCount()(*int64)
    GetIncorrectCameraDistanceOccurrencesCount()(*int64)
    GetLengthOfSubmissionInSeconds()(*float64)
    GetLostEyeContactOccurrencesCount()(*int64)
    GetMonotoneOccurrencesCount()(*int64)
    GetNonInclusiveLanguageOccurrencesCount()(*int64)
    GetObstructedViewOccurrencesCount()(*int64)
    GetRepetitiveLanguageOccurrencesCount()(*int64)
    GetStudentId()(*string)
    GetSubmissionDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)
    GetSubmissionId()(*string)
    GetTopFillerWords()([]string)
    GetTopMispronouncedWords()([]string)
    GetTopNonInclusiveWordsAndPhrases()([]string)
    GetTopRepetitiveWordsAndPhrases()([]string)
    GetWordsSpokenCount()(*int64)
    SetAssignmentId(value *string)()
    SetAverageWordsPerMinutePace(value *int64)()
    SetClassId(value *string)()
    SetFillerWordsOccurrencesCount(value *int64)()
    SetIncorrectCameraDistanceOccurrencesCount(value *int64)()
    SetLengthOfSubmissionInSeconds(value *float64)()
    SetLostEyeContactOccurrencesCount(value *int64)()
    SetMonotoneOccurrencesCount(value *int64)()
    SetNonInclusiveLanguageOccurrencesCount(value *int64)()
    SetObstructedViewOccurrencesCount(value *int64)()
    SetRepetitiveLanguageOccurrencesCount(value *int64)()
    SetStudentId(value *string)()
    SetSubmissionDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)()
    SetSubmissionId(value *string)()
    SetTopFillerWords(value []string)()
    SetTopMispronouncedWords(value []string)()
    SetTopNonInclusiveWordsAndPhrases(value []string)()
    SetTopRepetitiveWordsAndPhrases(value []string)()
    SetWordsSpokenCount(value *int64)()
}
