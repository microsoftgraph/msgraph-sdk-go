// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type EducationSpeakerProgressResource struct {
    EducationResource
}
// NewEducationSpeakerProgressResource instantiates a new EducationSpeakerProgressResource and sets the default values.
func NewEducationSpeakerProgressResource()(*EducationSpeakerProgressResource) {
    m := &EducationSpeakerProgressResource{
        EducationResource: *NewEducationResource(),
    }
    odataTypeValue := "#microsoft.graph.educationSpeakerProgressResource"
    m.SetOdataType(&odataTypeValue)
    return m
}
// CreateEducationSpeakerProgressResourceFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateEducationSpeakerProgressResourceFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewEducationSpeakerProgressResource(), nil
}
// GetAiFeedbackCriteria gets the aiFeedbackCriteria property value. The feedback types that students should receive from AI feedback. This property should only be provided if isAiFeedbackEnabled is true.
// returns a EducationAiFeedbackCriteriaable when successful
func (m *EducationSpeakerProgressResource) GetAiFeedbackCriteria()(EducationAiFeedbackCriteriaable) {
    val, err := m.GetBackingStore().Get("aiFeedbackCriteria")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(EducationAiFeedbackCriteriaable)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *EducationSpeakerProgressResource) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.EducationResource.GetFieldDeserializers()
    res["aiFeedbackCriteria"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateEducationAiFeedbackCriteriaFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAiFeedbackCriteria(val.(EducationAiFeedbackCriteriaable))
        }
        return nil
    }
    res["isAiFeedbackEnabled"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetIsAiFeedbackEnabled(val)
        }
        return nil
    }
    res["isVideoRequired"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetIsVideoRequired(val)
        }
        return nil
    }
    res["maxRecordingAttempts"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt32Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetMaxRecordingAttempts(val)
        }
        return nil
    }
    res["presentationTitle"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetPresentationTitle(val)
        }
        return nil
    }
    res["recordingTimeLimitInMinutes"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetInt32Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetRecordingTimeLimitInMinutes(val)
        }
        return nil
    }
    res["showRehearsalReportToStudentBeforeMediaUpload"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetShowRehearsalReportToStudentBeforeMediaUpload(val)
        }
        return nil
    }
    res["speakerCoachSettings"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateEducationSpeakerCoachSettingsFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSpeakerCoachSettings(val.(EducationSpeakerCoachSettingsable))
        }
        return nil
    }
    res["spokenLanguageLocale"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSpokenLanguageLocale(val)
        }
        return nil
    }
    return res
}
// GetIsAiFeedbackEnabled gets the isAiFeedbackEnabled property value. Indicates whether AI feedback is enabled for the student submissions.
// returns a *bool when successful
func (m *EducationSpeakerProgressResource) GetIsAiFeedbackEnabled()(*bool) {
    val, err := m.GetBackingStore().Get("isAiFeedbackEnabled")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*bool)
    }
    return nil
}
// GetIsVideoRequired gets the isVideoRequired property value. Indicates whether video is required for the student recording.
// returns a *bool when successful
func (m *EducationSpeakerProgressResource) GetIsVideoRequired()(*bool) {
    val, err := m.GetBackingStore().Get("isVideoRequired")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*bool)
    }
    return nil
}
// GetMaxRecordingAttempts gets the maxRecordingAttempts property value. The maximum number of recording attempts available to the student. Specify 0 to set unlimited recording attempts.
// returns a *int32 when successful
func (m *EducationSpeakerProgressResource) GetMaxRecordingAttempts()(*int32) {
    val, err := m.GetBackingStore().Get("maxRecordingAttempts")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int32)
    }
    return nil
}
// GetPresentationTitle gets the presentationTitle property value. The title of the speaker progress resource visible to students.
// returns a *string when successful
func (m *EducationSpeakerProgressResource) GetPresentationTitle()(*string) {
    val, err := m.GetBackingStore().Get("presentationTitle")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetRecordingTimeLimitInMinutes gets the recordingTimeLimitInMinutes property value. The time limit is in minutes for the student recording.
// returns a *int32 when successful
func (m *EducationSpeakerProgressResource) GetRecordingTimeLimitInMinutes()(*int32) {
    val, err := m.GetBackingStore().Get("recordingTimeLimitInMinutes")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*int32)
    }
    return nil
}
// GetShowRehearsalReportToStudentBeforeMediaUpload gets the showRehearsalReportToStudentBeforeMediaUpload property value. Allows students to view their rehearsal report before the assignment is graded.
// returns a *bool when successful
func (m *EducationSpeakerProgressResource) GetShowRehearsalReportToStudentBeforeMediaUpload()(*bool) {
    val, err := m.GetBackingStore().Get("showRehearsalReportToStudentBeforeMediaUpload")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*bool)
    }
    return nil
}
// GetSpeakerCoachSettings gets the speakerCoachSettings property value. The feedback types that students should receive from the Speaker Coach.
// returns a EducationSpeakerCoachSettingsable when successful
func (m *EducationSpeakerProgressResource) GetSpeakerCoachSettings()(EducationSpeakerCoachSettingsable) {
    val, err := m.GetBackingStore().Get("speakerCoachSettings")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(EducationSpeakerCoachSettingsable)
    }
    return nil
}
// GetSpokenLanguageLocale gets the spokenLanguageLocale property value. The spoken language for the student recording. For example, en-US.
// returns a *string when successful
func (m *EducationSpeakerProgressResource) GetSpokenLanguageLocale()(*string) {
    val, err := m.GetBackingStore().Get("spokenLanguageLocale")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// Serialize serializes information the current object
func (m *EducationSpeakerProgressResource) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.EducationResource.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteObjectValue("aiFeedbackCriteria", m.GetAiFeedbackCriteria())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteBoolValue("isAiFeedbackEnabled", m.GetIsAiFeedbackEnabled())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteBoolValue("isVideoRequired", m.GetIsVideoRequired())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt32Value("maxRecordingAttempts", m.GetMaxRecordingAttempts())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("presentationTitle", m.GetPresentationTitle())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteInt32Value("recordingTimeLimitInMinutes", m.GetRecordingTimeLimitInMinutes())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteBoolValue("showRehearsalReportToStudentBeforeMediaUpload", m.GetShowRehearsalReportToStudentBeforeMediaUpload())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("speakerCoachSettings", m.GetSpeakerCoachSettings())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("spokenLanguageLocale", m.GetSpokenLanguageLocale())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAiFeedbackCriteria sets the aiFeedbackCriteria property value. The feedback types that students should receive from AI feedback. This property should only be provided if isAiFeedbackEnabled is true.
func (m *EducationSpeakerProgressResource) SetAiFeedbackCriteria(value EducationAiFeedbackCriteriaable)() {
    err := m.GetBackingStore().Set("aiFeedbackCriteria", value)
    if err != nil {
        panic(err)
    }
}
// SetIsAiFeedbackEnabled sets the isAiFeedbackEnabled property value. Indicates whether AI feedback is enabled for the student submissions.
func (m *EducationSpeakerProgressResource) SetIsAiFeedbackEnabled(value *bool)() {
    err := m.GetBackingStore().Set("isAiFeedbackEnabled", value)
    if err != nil {
        panic(err)
    }
}
// SetIsVideoRequired sets the isVideoRequired property value. Indicates whether video is required for the student recording.
func (m *EducationSpeakerProgressResource) SetIsVideoRequired(value *bool)() {
    err := m.GetBackingStore().Set("isVideoRequired", value)
    if err != nil {
        panic(err)
    }
}
// SetMaxRecordingAttempts sets the maxRecordingAttempts property value. The maximum number of recording attempts available to the student. Specify 0 to set unlimited recording attempts.
func (m *EducationSpeakerProgressResource) SetMaxRecordingAttempts(value *int32)() {
    err := m.GetBackingStore().Set("maxRecordingAttempts", value)
    if err != nil {
        panic(err)
    }
}
// SetPresentationTitle sets the presentationTitle property value. The title of the speaker progress resource visible to students.
func (m *EducationSpeakerProgressResource) SetPresentationTitle(value *string)() {
    err := m.GetBackingStore().Set("presentationTitle", value)
    if err != nil {
        panic(err)
    }
}
// SetRecordingTimeLimitInMinutes sets the recordingTimeLimitInMinutes property value. The time limit is in minutes for the student recording.
func (m *EducationSpeakerProgressResource) SetRecordingTimeLimitInMinutes(value *int32)() {
    err := m.GetBackingStore().Set("recordingTimeLimitInMinutes", value)
    if err != nil {
        panic(err)
    }
}
// SetShowRehearsalReportToStudentBeforeMediaUpload sets the showRehearsalReportToStudentBeforeMediaUpload property value. Allows students to view their rehearsal report before the assignment is graded.
func (m *EducationSpeakerProgressResource) SetShowRehearsalReportToStudentBeforeMediaUpload(value *bool)() {
    err := m.GetBackingStore().Set("showRehearsalReportToStudentBeforeMediaUpload", value)
    if err != nil {
        panic(err)
    }
}
// SetSpeakerCoachSettings sets the speakerCoachSettings property value. The feedback types that students should receive from the Speaker Coach.
func (m *EducationSpeakerProgressResource) SetSpeakerCoachSettings(value EducationSpeakerCoachSettingsable)() {
    err := m.GetBackingStore().Set("speakerCoachSettings", value)
    if err != nil {
        panic(err)
    }
}
// SetSpokenLanguageLocale sets the spokenLanguageLocale property value. The spoken language for the student recording. For example, en-US.
func (m *EducationSpeakerProgressResource) SetSpokenLanguageLocale(value *string)() {
    err := m.GetBackingStore().Set("spokenLanguageLocale", value)
    if err != nil {
        panic(err)
    }
}
type EducationSpeakerProgressResourceable interface {
    EducationResourceable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetAiFeedbackCriteria()(EducationAiFeedbackCriteriaable)
    GetIsAiFeedbackEnabled()(*bool)
    GetIsVideoRequired()(*bool)
    GetMaxRecordingAttempts()(*int32)
    GetPresentationTitle()(*string)
    GetRecordingTimeLimitInMinutes()(*int32)
    GetShowRehearsalReportToStudentBeforeMediaUpload()(*bool)
    GetSpeakerCoachSettings()(EducationSpeakerCoachSettingsable)
    GetSpokenLanguageLocale()(*string)
    SetAiFeedbackCriteria(value EducationAiFeedbackCriteriaable)()
    SetIsAiFeedbackEnabled(value *bool)()
    SetIsVideoRequired(value *bool)()
    SetMaxRecordingAttempts(value *int32)()
    SetPresentationTitle(value *string)()
    SetRecordingTimeLimitInMinutes(value *int32)()
    SetShowRehearsalReportToStudentBeforeMediaUpload(value *bool)()
    SetSpeakerCoachSettings(value EducationSpeakerCoachSettingsable)()
    SetSpokenLanguageLocale(value *string)()
}
