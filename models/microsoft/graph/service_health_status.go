package graph
import (
    "strings"
    "errors"
)
// Provides operations to manage the admin singleton.
type ServiceHealthStatus int

const (
    SERVICEOPERATIONAL_SERVICEHEALTHSTATUS ServiceHealthStatus = iota
    INVESTIGATING_SERVICEHEALTHSTATUS
    RESTORINGSERVICE_SERVICEHEALTHSTATUS
    VERIFYINGSERVICE_SERVICEHEALTHSTATUS
    SERVICERESTORED_SERVICEHEALTHSTATUS
    POSTINCIDENTREVIEWPUBLISHED_SERVICEHEALTHSTATUS
    SERVICEDEGRADATION_SERVICEHEALTHSTATUS
    SERVICEINTERRUPTION_SERVICEHEALTHSTATUS
    EXTENDEDRECOVERY_SERVICEHEALTHSTATUS
    FALSEPOSITIVE_SERVICEHEALTHSTATUS
    INVESTIGATIONSUSPENDED_SERVICEHEALTHSTATUS
    RESOLVED_SERVICEHEALTHSTATUS
    MITIGATEDEXTERNAL_SERVICEHEALTHSTATUS
    MITIGATED_SERVICEHEALTHSTATUS
    RESOLVEDEXTERNAL_SERVICEHEALTHSTATUS
    CONFIRMED_SERVICEHEALTHSTATUS
    REPORTED_SERVICEHEALTHSTATUS
    UNKNOWNFUTUREVALUE_SERVICEHEALTHSTATUS
)

func (i ServiceHealthStatus) String() string {
    return []string{"SERVICEOPERATIONAL", "INVESTIGATING", "RESTORINGSERVICE", "VERIFYINGSERVICE", "SERVICERESTORED", "POSTINCIDENTREVIEWPUBLISHED", "SERVICEDEGRADATION", "SERVICEINTERRUPTION", "EXTENDEDRECOVERY", "FALSEPOSITIVE", "INVESTIGATIONSUSPENDED", "RESOLVED", "MITIGATEDEXTERNAL", "MITIGATED", "RESOLVEDEXTERNAL", "CONFIRMED", "REPORTED", "UNKNOWNFUTUREVALUE"}[i]
}
func ParseServiceHealthStatus(v string) (interface{}, error) {
    result := SERVICEOPERATIONAL_SERVICEHEALTHSTATUS
    switch strings.ToUpper(v) {
        case "SERVICEOPERATIONAL":
            result = SERVICEOPERATIONAL_SERVICEHEALTHSTATUS
        case "INVESTIGATING":
            result = INVESTIGATING_SERVICEHEALTHSTATUS
        case "RESTORINGSERVICE":
            result = RESTORINGSERVICE_SERVICEHEALTHSTATUS
        case "VERIFYINGSERVICE":
            result = VERIFYINGSERVICE_SERVICEHEALTHSTATUS
        case "SERVICERESTORED":
            result = SERVICERESTORED_SERVICEHEALTHSTATUS
        case "POSTINCIDENTREVIEWPUBLISHED":
            result = POSTINCIDENTREVIEWPUBLISHED_SERVICEHEALTHSTATUS
        case "SERVICEDEGRADATION":
            result = SERVICEDEGRADATION_SERVICEHEALTHSTATUS
        case "SERVICEINTERRUPTION":
            result = SERVICEINTERRUPTION_SERVICEHEALTHSTATUS
        case "EXTENDEDRECOVERY":
            result = EXTENDEDRECOVERY_SERVICEHEALTHSTATUS
        case "FALSEPOSITIVE":
            result = FALSEPOSITIVE_SERVICEHEALTHSTATUS
        case "INVESTIGATIONSUSPENDED":
            result = INVESTIGATIONSUSPENDED_SERVICEHEALTHSTATUS
        case "RESOLVED":
            result = RESOLVED_SERVICEHEALTHSTATUS
        case "MITIGATEDEXTERNAL":
            result = MITIGATEDEXTERNAL_SERVICEHEALTHSTATUS
        case "MITIGATED":
            result = MITIGATED_SERVICEHEALTHSTATUS
        case "RESOLVEDEXTERNAL":
            result = RESOLVEDEXTERNAL_SERVICEHEALTHSTATUS
        case "CONFIRMED":
            result = CONFIRMED_SERVICEHEALTHSTATUS
        case "REPORTED":
            result = REPORTED_SERVICEHEALTHSTATUS
        case "UNKNOWNFUTUREVALUE":
            result = UNKNOWNFUTUREVALUE_SERVICEHEALTHSTATUS
        default:
            return 0, errors.New("Unknown ServiceHealthStatus value: " + v)
    }
    return &result, nil
}
func SerializeServiceHealthStatus(values []ServiceHealthStatus) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
