package graph
import (
    "strings"
    "errors"
)
// 
type RiskEventType int

const (
    UNLIKELYTRAVEL_RISKEVENTTYPE RiskEventType = iota
    ANONYMIZEDIPADDRESS_RISKEVENTTYPE
    MALICIOUSIPADDRESS_RISKEVENTTYPE
    UNFAMILIARFEATURES_RISKEVENTTYPE
    MALWAREINFECTEDIPADDRESS_RISKEVENTTYPE
    SUSPICIOUSIPADDRESS_RISKEVENTTYPE
    LEAKEDCREDENTIALS_RISKEVENTTYPE
    INVESTIGATIONSTHREATINTELLIGENCE_RISKEVENTTYPE
    GENERIC_RISKEVENTTYPE
    ADMINCONFIRMEDUSERCOMPROMISED_RISKEVENTTYPE
    MCASIMPOSSIBLETRAVEL_RISKEVENTTYPE
    MCASSUSPICIOUSINBOXMANIPULATIONRULES_RISKEVENTTYPE
    INVESTIGATIONSTHREATINTELLIGENCESIGNINLINKED_RISKEVENTTYPE
    MALICIOUSIPADDRESSVALIDCREDENTIALSBLOCKEDIP_RISKEVENTTYPE
    UNKNOWNFUTUREVALUE_RISKEVENTTYPE
)

func (i RiskEventType) String() string {
    return []string{"UNLIKELYTRAVEL", "ANONYMIZEDIPADDRESS", "MALICIOUSIPADDRESS", "UNFAMILIARFEATURES", "MALWAREINFECTEDIPADDRESS", "SUSPICIOUSIPADDRESS", "LEAKEDCREDENTIALS", "INVESTIGATIONSTHREATINTELLIGENCE", "GENERIC", "ADMINCONFIRMEDUSERCOMPROMISED", "MCASIMPOSSIBLETRAVEL", "MCASSUSPICIOUSINBOXMANIPULATIONRULES", "INVESTIGATIONSTHREATINTELLIGENCESIGNINLINKED", "MALICIOUSIPADDRESSVALIDCREDENTIALSBLOCKEDIP", "UNKNOWNFUTUREVALUE"}[i]
}
func ParseRiskEventType(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "UNLIKELYTRAVEL":
            return UNLIKELYTRAVEL_RISKEVENTTYPE, nil
        case "ANONYMIZEDIPADDRESS":
            return ANONYMIZEDIPADDRESS_RISKEVENTTYPE, nil
        case "MALICIOUSIPADDRESS":
            return MALICIOUSIPADDRESS_RISKEVENTTYPE, nil
        case "UNFAMILIARFEATURES":
            return UNFAMILIARFEATURES_RISKEVENTTYPE, nil
        case "MALWAREINFECTEDIPADDRESS":
            return MALWAREINFECTEDIPADDRESS_RISKEVENTTYPE, nil
        case "SUSPICIOUSIPADDRESS":
            return SUSPICIOUSIPADDRESS_RISKEVENTTYPE, nil
        case "LEAKEDCREDENTIALS":
            return LEAKEDCREDENTIALS_RISKEVENTTYPE, nil
        case "INVESTIGATIONSTHREATINTELLIGENCE":
            return INVESTIGATIONSTHREATINTELLIGENCE_RISKEVENTTYPE, nil
        case "GENERIC":
            return GENERIC_RISKEVENTTYPE, nil
        case "ADMINCONFIRMEDUSERCOMPROMISED":
            return ADMINCONFIRMEDUSERCOMPROMISED_RISKEVENTTYPE, nil
        case "MCASIMPOSSIBLETRAVEL":
            return MCASIMPOSSIBLETRAVEL_RISKEVENTTYPE, nil
        case "MCASSUSPICIOUSINBOXMANIPULATIONRULES":
            return MCASSUSPICIOUSINBOXMANIPULATIONRULES_RISKEVENTTYPE, nil
        case "INVESTIGATIONSTHREATINTELLIGENCESIGNINLINKED":
            return INVESTIGATIONSTHREATINTELLIGENCESIGNINLINKED_RISKEVENTTYPE, nil
        case "MALICIOUSIPADDRESSVALIDCREDENTIALSBLOCKEDIP":
            return MALICIOUSIPADDRESSVALIDCREDENTIALSBLOCKEDIP_RISKEVENTTYPE, nil
        case "UNKNOWNFUTUREVALUE":
            return UNKNOWNFUTUREVALUE_RISKEVENTTYPE, nil
    }
    return 0, errors.New("Unknown RiskEventType value: " + v)
}
func SerializeRiskEventType(values []RiskEventType) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
