package graph
import (
    "strings"
    "errors"
)
// Provides operations to manage the identityGovernance singleton.
type AllowedTargetScope int

const (
    NOTSPECIFIED_ALLOWEDTARGETSCOPE AllowedTargetScope = iota
    SPECIFICDIRECTORYUSERS_ALLOWEDTARGETSCOPE
    SPECIFICCONNECTEDORGANIZATIONUSERS_ALLOWEDTARGETSCOPE
    SPECIFICDIRECTORYSERVICEPRINCIPALS_ALLOWEDTARGETSCOPE
    ALLMEMBERUSERS_ALLOWEDTARGETSCOPE
    ALLDIRECTORYUSERS_ALLOWEDTARGETSCOPE
    ALLDIRECTORYSERVICEPRINCIPALS_ALLOWEDTARGETSCOPE
    ALLCONFIGUREDCONNECTEDORGANIZATIONUSERS_ALLOWEDTARGETSCOPE
    ALLEXTERNALUSERS_ALLOWEDTARGETSCOPE
    UNKNOWNFUTUREVALUE_ALLOWEDTARGETSCOPE
)

func (i AllowedTargetScope) String() string {
    return []string{"NOTSPECIFIED", "SPECIFICDIRECTORYUSERS", "SPECIFICCONNECTEDORGANIZATIONUSERS", "SPECIFICDIRECTORYSERVICEPRINCIPALS", "ALLMEMBERUSERS", "ALLDIRECTORYUSERS", "ALLDIRECTORYSERVICEPRINCIPALS", "ALLCONFIGUREDCONNECTEDORGANIZATIONUSERS", "ALLEXTERNALUSERS", "UNKNOWNFUTUREVALUE"}[i]
}
func ParseAllowedTargetScope(v string) (interface{}, error) {
    result := NOTSPECIFIED_ALLOWEDTARGETSCOPE
    switch strings.ToUpper(v) {
        case "NOTSPECIFIED":
            result = NOTSPECIFIED_ALLOWEDTARGETSCOPE
        case "SPECIFICDIRECTORYUSERS":
            result = SPECIFICDIRECTORYUSERS_ALLOWEDTARGETSCOPE
        case "SPECIFICCONNECTEDORGANIZATIONUSERS":
            result = SPECIFICCONNECTEDORGANIZATIONUSERS_ALLOWEDTARGETSCOPE
        case "SPECIFICDIRECTORYSERVICEPRINCIPALS":
            result = SPECIFICDIRECTORYSERVICEPRINCIPALS_ALLOWEDTARGETSCOPE
        case "ALLMEMBERUSERS":
            result = ALLMEMBERUSERS_ALLOWEDTARGETSCOPE
        case "ALLDIRECTORYUSERS":
            result = ALLDIRECTORYUSERS_ALLOWEDTARGETSCOPE
        case "ALLDIRECTORYSERVICEPRINCIPALS":
            result = ALLDIRECTORYSERVICEPRINCIPALS_ALLOWEDTARGETSCOPE
        case "ALLCONFIGUREDCONNECTEDORGANIZATIONUSERS":
            result = ALLCONFIGUREDCONNECTEDORGANIZATIONUSERS_ALLOWEDTARGETSCOPE
        case "ALLEXTERNALUSERS":
            result = ALLEXTERNALUSERS_ALLOWEDTARGETSCOPE
        case "UNKNOWNFUTUREVALUE":
            result = UNKNOWNFUTUREVALUE_ALLOWEDTARGETSCOPE
        default:
            return 0, errors.New("Unknown AllowedTargetScope value: " + v)
    }
    return &result, nil
}
func SerializeAllowedTargetScope(values []AllowedTargetScope) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
