package graph

import (
    i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55 "github.com/microsoft/kiota/abstractions/go/serialization"
)

// VulnerabilityState 
type VulnerabilityState struct {
    // Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    additionalData map[string]interface{};
    // Common Vulnerabilities and Exposures (CVE) for the vulnerability.
    cve *string;
    // Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability.
    severity *string;
    // Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at rest on the disk.
    wasRunning *bool;
}
// NewVulnerabilityState instantiates a new vulnerabilityState and sets the default values.
func NewVulnerabilityState()(*VulnerabilityState) {
    m := &VulnerabilityState{
    }
    m.SetAdditionalData(make(map[string]interface{}));
    return m
}
// GetAdditionalData gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
func (m *VulnerabilityState) GetAdditionalData()(map[string]interface{}) {
    if m == nil {
        return nil
    } else {
        return m.additionalData
    }
}
// GetCve gets the cve property value. Common Vulnerabilities and Exposures (CVE) for the vulnerability.
func (m *VulnerabilityState) GetCve()(*string) {
    if m == nil {
        return nil
    } else {
        return m.cve
    }
}
// GetSeverity gets the severity property value. Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability.
func (m *VulnerabilityState) GetSeverity()(*string) {
    if m == nil {
        return nil
    } else {
        return m.severity
    }
}
// GetWasRunning gets the wasRunning property value. Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at rest on the disk.
func (m *VulnerabilityState) GetWasRunning()(*bool) {
    if m == nil {
        return nil
    } else {
        return m.wasRunning
    }
}
// GetFieldDeserializers the deserialization information for the current model
func (m *VulnerabilityState) GetFieldDeserializers()(map[string]func(interface{}, i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode)(error)) {
    res := make(map[string]func(interface{}, i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode)(error))
    res["cve"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCve(val)
        }
        return nil
    }
    res["severity"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetSeverity(val)
        }
        return nil
    }
    res["wasRunning"] = func (o interface{}, n i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetWasRunning(val)
        }
        return nil
    }
    return res
}
func (m *VulnerabilityState) IsNil()(bool) {
    return m == nil
}
// Serialize serializes information the current object
func (m *VulnerabilityState) Serialize(writer i04eb5309aeaafadd28374d79c8471df9b267510b4dc2e3144c378c50f6fd7b55.SerializationWriter)(error) {
    {
        err := writer.WriteStringValue("cve", m.GetCve())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("severity", m.GetSeverity())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteBoolValue("wasRunning", m.GetWasRunning())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteAdditionalData(m.GetAdditionalData())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAdditionalData sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
func (m *VulnerabilityState) SetAdditionalData(value map[string]interface{})() {
    if m != nil {
        m.additionalData = value
    }
}
// SetCve sets the cve property value. Common Vulnerabilities and Exposures (CVE) for the vulnerability.
func (m *VulnerabilityState) SetCve(value *string)() {
    if m != nil {
        m.cve = value
    }
}
// SetSeverity sets the severity property value. Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability.
func (m *VulnerabilityState) SetSeverity(value *string)() {
    if m != nil {
        m.severity = value
    }
}
// SetWasRunning sets the wasRunning property value. Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at rest on the disk.
func (m *VulnerabilityState) SetWasRunning(value *bool)() {
    if m != nil {
        m.wasRunning = value
    }
}
