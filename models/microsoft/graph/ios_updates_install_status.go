package graph
import (
    "strings"
    "errors"
)
// 
type IosUpdatesInstallStatus int

const (
    DEVICEOSHIGHERTHANDESIREDOSVERSION_IOSUPDATESINSTALLSTATUS IosUpdatesInstallStatus = iota
    SHAREDDEVICEUSERLOGGEDINERROR_IOSUPDATESINSTALLSTATUS
    NOTSUPPORTEDOPERATION_IOSUPDATESINSTALLSTATUS
    INSTALLFAILED_IOSUPDATESINSTALLSTATUS
    INSTALLPHONECALLINPROGRESS_IOSUPDATESINSTALLSTATUS
    INSTALLINSUFFICIENTPOWER_IOSUPDATESINSTALLSTATUS
    INSTALLINSUFFICIENTSPACE_IOSUPDATESINSTALLSTATUS
    INSTALLING_IOSUPDATESINSTALLSTATUS
    DOWNLOADINSUFFICIENTNETWORK_IOSUPDATESINSTALLSTATUS
    DOWNLOADINSUFFICIENTPOWER_IOSUPDATESINSTALLSTATUS
    DOWNLOADINSUFFICIENTSPACE_IOSUPDATESINSTALLSTATUS
    DOWNLOADREQUIRESCOMPUTER_IOSUPDATESINSTALLSTATUS
    DOWNLOADFAILED_IOSUPDATESINSTALLSTATUS
    DOWNLOADING_IOSUPDATESINSTALLSTATUS
    SUCCESS_IOSUPDATESINSTALLSTATUS
    AVAILABLE_IOSUPDATESINSTALLSTATUS
    IDLE_IOSUPDATESINSTALLSTATUS
    UNKNOWN_IOSUPDATESINSTALLSTATUS
)

func (i IosUpdatesInstallStatus) String() string {
    return []string{"DEVICEOSHIGHERTHANDESIREDOSVERSION", "SHAREDDEVICEUSERLOGGEDINERROR", "NOTSUPPORTEDOPERATION", "INSTALLFAILED", "INSTALLPHONECALLINPROGRESS", "INSTALLINSUFFICIENTPOWER", "INSTALLINSUFFICIENTSPACE", "INSTALLING", "DOWNLOADINSUFFICIENTNETWORK", "DOWNLOADINSUFFICIENTPOWER", "DOWNLOADINSUFFICIENTSPACE", "DOWNLOADREQUIRESCOMPUTER", "DOWNLOADFAILED", "DOWNLOADING", "SUCCESS", "AVAILABLE", "IDLE", "UNKNOWN"}[i]
}
func ParseIosUpdatesInstallStatus(v string) (interface{}, error) {
    switch strings.ToUpper(v) {
        case "DEVICEOSHIGHERTHANDESIREDOSVERSION":
            return DEVICEOSHIGHERTHANDESIREDOSVERSION_IOSUPDATESINSTALLSTATUS, nil
        case "SHAREDDEVICEUSERLOGGEDINERROR":
            return SHAREDDEVICEUSERLOGGEDINERROR_IOSUPDATESINSTALLSTATUS, nil
        case "NOTSUPPORTEDOPERATION":
            return NOTSUPPORTEDOPERATION_IOSUPDATESINSTALLSTATUS, nil
        case "INSTALLFAILED":
            return INSTALLFAILED_IOSUPDATESINSTALLSTATUS, nil
        case "INSTALLPHONECALLINPROGRESS":
            return INSTALLPHONECALLINPROGRESS_IOSUPDATESINSTALLSTATUS, nil
        case "INSTALLINSUFFICIENTPOWER":
            return INSTALLINSUFFICIENTPOWER_IOSUPDATESINSTALLSTATUS, nil
        case "INSTALLINSUFFICIENTSPACE":
            return INSTALLINSUFFICIENTSPACE_IOSUPDATESINSTALLSTATUS, nil
        case "INSTALLING":
            return INSTALLING_IOSUPDATESINSTALLSTATUS, nil
        case "DOWNLOADINSUFFICIENTNETWORK":
            return DOWNLOADINSUFFICIENTNETWORK_IOSUPDATESINSTALLSTATUS, nil
        case "DOWNLOADINSUFFICIENTPOWER":
            return DOWNLOADINSUFFICIENTPOWER_IOSUPDATESINSTALLSTATUS, nil
        case "DOWNLOADINSUFFICIENTSPACE":
            return DOWNLOADINSUFFICIENTSPACE_IOSUPDATESINSTALLSTATUS, nil
        case "DOWNLOADREQUIRESCOMPUTER":
            return DOWNLOADREQUIRESCOMPUTER_IOSUPDATESINSTALLSTATUS, nil
        case "DOWNLOADFAILED":
            return DOWNLOADFAILED_IOSUPDATESINSTALLSTATUS, nil
        case "DOWNLOADING":
            return DOWNLOADING_IOSUPDATESINSTALLSTATUS, nil
        case "SUCCESS":
            return SUCCESS_IOSUPDATESINSTALLSTATUS, nil
        case "AVAILABLE":
            return AVAILABLE_IOSUPDATESINSTALLSTATUS, nil
        case "IDLE":
            return IDLE_IOSUPDATESINSTALLSTATUS, nil
        case "UNKNOWN":
            return UNKNOWN_IOSUPDATESINSTALLSTATUS, nil
    }
    return 0, errors.New("Unknown IosUpdatesInstallStatus value: " + v)
}
func SerializeIosUpdatesInstallStatus(values []IosUpdatesInstallStatus) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
