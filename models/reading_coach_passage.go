// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e "time"
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type ReadingCoachPassage struct {
    Entity
}
// NewReadingCoachPassage instantiates a new ReadingCoachPassage and sets the default values.
func NewReadingCoachPassage()(*ReadingCoachPassage) {
    m := &ReadingCoachPassage{
        Entity: *NewEntity(),
    }
    return m
}
// CreateReadingCoachPassageFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateReadingCoachPassageFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewReadingCoachPassage(), nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *ReadingCoachPassage) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["isReadingCompleted"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetBoolValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetIsReadingCompleted(val)
        }
        return nil
    }
    res["languageTag"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLanguageTag(val)
        }
        return nil
    }
    res["practicedAtDateTime"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetPracticedAtDateTime(val)
        }
        return nil
    }
    res["practiceWords"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfPrimitiveValues("string")
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]string, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = *(v.(*string))
                }
            }
            m.SetPracticeWords(res)
        }
        return nil
    }
    res["storyType"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseReadingCoachStoryType)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetStoryType(val.(*ReadingCoachStoryType))
        }
        return nil
    }
    res["studentId"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetStudentId(val)
        }
        return nil
    }
    res["timeSpentReadingInSeconds"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetTimeSpentReadingInSeconds(val)
        }
        return nil
    }
    res["wordsAccuracyPercentage"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetWordsAccuracyPercentage(val)
        }
        return nil
    }
    res["wordsPerMinute"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetFloat64Value()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetWordsPerMinute(val)
        }
        return nil
    }
    return res
}
// GetIsReadingCompleted gets the isReadingCompleted property value. Indicates if the reading passage was completed.
// returns a *bool when successful
func (m *ReadingCoachPassage) GetIsReadingCompleted()(*bool) {
    val, err := m.GetBackingStore().Get("isReadingCompleted")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*bool)
    }
    return nil
}
// GetLanguageTag gets the languageTag property value. The language of the reading passage.
// returns a *string when successful
func (m *ReadingCoachPassage) GetLanguageTag()(*string) {
    val, err := m.GetBackingStore().Get("languageTag")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetPracticedAtDateTime gets the practicedAtDateTime property value. The date and time when the Reading Coach passage was practiced. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
// returns a *Time when successful
func (m *ReadingCoachPassage) GetPracticedAtDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    val, err := m.GetBackingStore().Get("practicedAtDateTime")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)
    }
    return nil
}
// GetPracticeWords gets the practiceWords property value. The list of challenging words for the student that they can practice further.
// returns a []string when successful
func (m *ReadingCoachPassage) GetPracticeWords()([]string) {
    val, err := m.GetBackingStore().Get("practiceWords")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]string)
    }
    return nil
}
// GetStoryType gets the storyType property value. The storyType property
// returns a *ReadingCoachStoryType when successful
func (m *ReadingCoachPassage) GetStoryType()(*ReadingCoachStoryType) {
    val, err := m.GetBackingStore().Get("storyType")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*ReadingCoachStoryType)
    }
    return nil
}
// GetStudentId gets the studentId property value. ID of the student that practiced the reading passage.
// returns a *string when successful
func (m *ReadingCoachPassage) GetStudentId()(*string) {
    val, err := m.GetBackingStore().Get("studentId")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// GetTimeSpentReadingInSeconds gets the timeSpentReadingInSeconds property value. The time the student spent reading in seconds.
// returns a *float64 when successful
func (m *ReadingCoachPassage) GetTimeSpentReadingInSeconds()(*float64) {
    val, err := m.GetBackingStore().Get("timeSpentReadingInSeconds")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*float64)
    }
    return nil
}
// GetWordsAccuracyPercentage gets the wordsAccuracyPercentage property value. The percentage of words that the student read correctly.
// returns a *float64 when successful
func (m *ReadingCoachPassage) GetWordsAccuracyPercentage()(*float64) {
    val, err := m.GetBackingStore().Get("wordsAccuracyPercentage")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*float64)
    }
    return nil
}
// GetWordsPerMinute gets the wordsPerMinute property value. The rate the student read at in words per minute.
// returns a *float64 when successful
func (m *ReadingCoachPassage) GetWordsPerMinute()(*float64) {
    val, err := m.GetBackingStore().Get("wordsPerMinute")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*float64)
    }
    return nil
}
// Serialize serializes information the current object
func (m *ReadingCoachPassage) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteBoolValue("isReadingCompleted", m.GetIsReadingCompleted())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("languageTag", m.GetLanguageTag())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteTimeValue("practicedAtDateTime", m.GetPracticedAtDateTime())
        if err != nil {
            return err
        }
    }
    if m.GetPracticeWords() != nil {
        err = writer.WriteCollectionOfStringValues("practiceWords", m.GetPracticeWords())
        if err != nil {
            return err
        }
    }
    if m.GetStoryType() != nil {
        cast := (*m.GetStoryType()).String()
        err = writer.WriteStringValue("storyType", &cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("studentId", m.GetStudentId())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteFloat64Value("timeSpentReadingInSeconds", m.GetTimeSpentReadingInSeconds())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteFloat64Value("wordsAccuracyPercentage", m.GetWordsAccuracyPercentage())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteFloat64Value("wordsPerMinute", m.GetWordsPerMinute())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetIsReadingCompleted sets the isReadingCompleted property value. Indicates if the reading passage was completed.
func (m *ReadingCoachPassage) SetIsReadingCompleted(value *bool)() {
    err := m.GetBackingStore().Set("isReadingCompleted", value)
    if err != nil {
        panic(err)
    }
}
// SetLanguageTag sets the languageTag property value. The language of the reading passage.
func (m *ReadingCoachPassage) SetLanguageTag(value *string)() {
    err := m.GetBackingStore().Set("languageTag", value)
    if err != nil {
        panic(err)
    }
}
// SetPracticedAtDateTime sets the practicedAtDateTime property value. The date and time when the Reading Coach passage was practiced. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
func (m *ReadingCoachPassage) SetPracticedAtDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    err := m.GetBackingStore().Set("practicedAtDateTime", value)
    if err != nil {
        panic(err)
    }
}
// SetPracticeWords sets the practiceWords property value. The list of challenging words for the student that they can practice further.
func (m *ReadingCoachPassage) SetPracticeWords(value []string)() {
    err := m.GetBackingStore().Set("practiceWords", value)
    if err != nil {
        panic(err)
    }
}
// SetStoryType sets the storyType property value. The storyType property
func (m *ReadingCoachPassage) SetStoryType(value *ReadingCoachStoryType)() {
    err := m.GetBackingStore().Set("storyType", value)
    if err != nil {
        panic(err)
    }
}
// SetStudentId sets the studentId property value. ID of the student that practiced the reading passage.
func (m *ReadingCoachPassage) SetStudentId(value *string)() {
    err := m.GetBackingStore().Set("studentId", value)
    if err != nil {
        panic(err)
    }
}
// SetTimeSpentReadingInSeconds sets the timeSpentReadingInSeconds property value. The time the student spent reading in seconds.
func (m *ReadingCoachPassage) SetTimeSpentReadingInSeconds(value *float64)() {
    err := m.GetBackingStore().Set("timeSpentReadingInSeconds", value)
    if err != nil {
        panic(err)
    }
}
// SetWordsAccuracyPercentage sets the wordsAccuracyPercentage property value. The percentage of words that the student read correctly.
func (m *ReadingCoachPassage) SetWordsAccuracyPercentage(value *float64)() {
    err := m.GetBackingStore().Set("wordsAccuracyPercentage", value)
    if err != nil {
        panic(err)
    }
}
// SetWordsPerMinute sets the wordsPerMinute property value. The rate the student read at in words per minute.
func (m *ReadingCoachPassage) SetWordsPerMinute(value *float64)() {
    err := m.GetBackingStore().Set("wordsPerMinute", value)
    if err != nil {
        panic(err)
    }
}
type ReadingCoachPassageable interface {
    Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetIsReadingCompleted()(*bool)
    GetLanguageTag()(*string)
    GetPracticedAtDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)
    GetPracticeWords()([]string)
    GetStoryType()(*ReadingCoachStoryType)
    GetStudentId()(*string)
    GetTimeSpentReadingInSeconds()(*float64)
    GetWordsAccuracyPercentage()(*float64)
    GetWordsPerMinute()(*float64)
    SetIsReadingCompleted(value *bool)()
    SetLanguageTag(value *string)()
    SetPracticedAtDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)()
    SetPracticeWords(value []string)()
    SetStoryType(value *ReadingCoachStoryType)()
    SetStudentId(value *string)()
    SetTimeSpentReadingInSeconds(value *float64)()
    SetWordsAccuracyPercentage(value *float64)()
    SetWordsPerMinute(value *float64)()
}
