// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e "time"
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

// EngagementConversationMessage a Viva Engage conversation message.
type EngagementConversationMessage struct {
    Entity
}
// NewEngagementConversationMessage instantiates a new EngagementConversationMessage and sets the default values.
func NewEngagementConversationMessage()(*EngagementConversationMessage) {
    m := &EngagementConversationMessage{
        Entity: *NewEntity(),
    }
    return m
}
// CreateEngagementConversationMessageFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateEngagementConversationMessageFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    if parseNode != nil {
        mappingValueNode, err := parseNode.GetChildNode("@odata.type")
        if err != nil {
            return nil, err
        }
        if mappingValueNode != nil {
            mappingValue, err := mappingValueNode.GetStringValue()
            if err != nil {
                return nil, err
            }
            if mappingValue != nil {
                switch *mappingValue {
                    case "#microsoft.graph.engagementConversationDiscussionMessage":
                        return NewEngagementConversationDiscussionMessage(), nil
                    case "#microsoft.graph.engagementConversationQuestionMessage":
                        return NewEngagementConversationQuestionMessage(), nil
                    case "#microsoft.graph.engagementConversationSystemMessage":
                        return NewEngagementConversationSystemMessage(), nil
                }
            }
        }
    }
    return NewEngagementConversationMessage(), nil
}
// GetBody gets the body property value. The body property
// returns a ItemBodyable when successful
func (m *EngagementConversationMessage) GetBody()(ItemBodyable) {
    val, err := m.GetBackingStore().Get("body")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(ItemBodyable)
    }
    return nil
}
// GetConversation gets the conversation property value. The conversation property
// returns a EngagementConversationable when successful
func (m *EngagementConversationMessage) GetConversation()(EngagementConversationable) {
    val, err := m.GetBackingStore().Get("conversation")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(EngagementConversationable)
    }
    return nil
}
// GetCreatedDateTime gets the createdDateTime property value. The date and time when the message was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
// returns a *Time when successful
func (m *EngagementConversationMessage) GetCreatedDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    val, err := m.GetBackingStore().Get("createdDateTime")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)
    }
    return nil
}
// GetCreationMode gets the creationMode property value. Indicates that the resource is in migration state and is currently being used for migration purposes.
// returns a *EngagementCreationMode when successful
func (m *EngagementConversationMessage) GetCreationMode()(*EngagementCreationMode) {
    val, err := m.GetBackingStore().Get("creationMode")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*EngagementCreationMode)
    }
    return nil
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *EngagementConversationMessage) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := m.Entity.GetFieldDeserializers()
    res["body"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateItemBodyFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetBody(val.(ItemBodyable))
        }
        return nil
    }
    res["conversation"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateEngagementConversationFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetConversation(val.(EngagementConversationable))
        }
        return nil
    }
    res["createdDateTime"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCreatedDateTime(val)
        }
        return nil
    }
    res["creationMode"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseEngagementCreationMode)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetCreationMode(val.(*EngagementCreationMode))
        }
        return nil
    }
    res["from"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateEngagementIdentitySetFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetFrom(val.(EngagementIdentitySetable))
        }
        return nil
    }
    res["lastModifiedDateTime"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetTimeValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLastModifiedDateTime(val)
        }
        return nil
    }
    res["reactions"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(CreateEngagementConversationMessageReactionFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]EngagementConversationMessageReactionable, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = v.(EngagementConversationMessageReactionable)
                }
            }
            m.SetReactions(res)
        }
        return nil
    }
    res["replies"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetCollectionOfObjectValues(CreateEngagementConversationMessageFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            res := make([]EngagementConversationMessageable, len(val))
            for i, v := range val {
                if v != nil {
                    res[i] = v.(EngagementConversationMessageable)
                }
            }
            m.SetReplies(res)
        }
        return nil
    }
    res["replyTo"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateEngagementConversationMessageFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetReplyTo(val.(EngagementConversationMessageable))
        }
        return nil
    }
    res["replyToId"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetReplyToId(val)
        }
        return nil
    }
    return res
}
// GetFrom gets the from property value. Identity of the sender of the message.
// returns a EngagementIdentitySetable when successful
func (m *EngagementConversationMessage) GetFrom()(EngagementIdentitySetable) {
    val, err := m.GetBackingStore().Get("from")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(EngagementIdentitySetable)
    }
    return nil
}
// GetLastModifiedDateTime gets the lastModifiedDateTime property value. The date and time when message was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
// returns a *Time when successful
func (m *EngagementConversationMessage) GetLastModifiedDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time) {
    val, err := m.GetBackingStore().Get("lastModifiedDateTime")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)
    }
    return nil
}
// GetReactions gets the reactions property value. A collection of reactions (such as like and smile) that users have applied to this message.
// returns a []EngagementConversationMessageReactionable when successful
func (m *EngagementConversationMessage) GetReactions()([]EngagementConversationMessageReactionable) {
    val, err := m.GetBackingStore().Get("reactions")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]EngagementConversationMessageReactionable)
    }
    return nil
}
// GetReplies gets the replies property value. A collection of messages that are replies to this message and form a threaded discussion.
// returns a []EngagementConversationMessageable when successful
func (m *EngagementConversationMessage) GetReplies()([]EngagementConversationMessageable) {
    val, err := m.GetBackingStore().Get("replies")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.([]EngagementConversationMessageable)
    }
    return nil
}
// GetReplyTo gets the replyTo property value. The parent message to which this message is a reply, if it is part of a reply chain.
// returns a EngagementConversationMessageable when successful
func (m *EngagementConversationMessage) GetReplyTo()(EngagementConversationMessageable) {
    val, err := m.GetBackingStore().Get("replyTo")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(EngagementConversationMessageable)
    }
    return nil
}
// GetReplyToId gets the replyToId property value. The ID of the parent message to which this message is a reply, if applicable.
// returns a *string when successful
func (m *EngagementConversationMessage) GetReplyToId()(*string) {
    val, err := m.GetBackingStore().Get("replyToId")
    if err != nil {
        panic(err)
    }
    if val != nil {
        return val.(*string)
    }
    return nil
}
// Serialize serializes information the current object
func (m *EngagementConversationMessage) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    err := m.Entity.Serialize(writer)
    if err != nil {
        return err
    }
    {
        err = writer.WriteObjectValue("body", m.GetBody())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("conversation", m.GetConversation())
        if err != nil {
            return err
        }
    }
    if m.GetCreationMode() != nil {
        cast := (*m.GetCreationMode()).String()
        err = writer.WriteStringValue("creationMode", &cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("from", m.GetFrom())
        if err != nil {
            return err
        }
    }
    if m.GetReactions() != nil {
        cast := make([]i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, len(m.GetReactions()))
        for i, v := range m.GetReactions() {
            if v != nil {
                cast[i] = v.(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable)
            }
        }
        err = writer.WriteCollectionOfObjectValues("reactions", cast)
        if err != nil {
            return err
        }
    }
    if m.GetReplies() != nil {
        cast := make([]i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, len(m.GetReplies()))
        for i, v := range m.GetReplies() {
            if v != nil {
                cast[i] = v.(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable)
            }
        }
        err = writer.WriteCollectionOfObjectValues("replies", cast)
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteObjectValue("replyTo", m.GetReplyTo())
        if err != nil {
            return err
        }
    }
    {
        err = writer.WriteStringValue("replyToId", m.GetReplyToId())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetBody sets the body property value. The body property
func (m *EngagementConversationMessage) SetBody(value ItemBodyable)() {
    err := m.GetBackingStore().Set("body", value)
    if err != nil {
        panic(err)
    }
}
// SetConversation sets the conversation property value. The conversation property
func (m *EngagementConversationMessage) SetConversation(value EngagementConversationable)() {
    err := m.GetBackingStore().Set("conversation", value)
    if err != nil {
        panic(err)
    }
}
// SetCreatedDateTime sets the createdDateTime property value. The date and time when the message was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
func (m *EngagementConversationMessage) SetCreatedDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    err := m.GetBackingStore().Set("createdDateTime", value)
    if err != nil {
        panic(err)
    }
}
// SetCreationMode sets the creationMode property value. Indicates that the resource is in migration state and is currently being used for migration purposes.
func (m *EngagementConversationMessage) SetCreationMode(value *EngagementCreationMode)() {
    err := m.GetBackingStore().Set("creationMode", value)
    if err != nil {
        panic(err)
    }
}
// SetFrom sets the from property value. Identity of the sender of the message.
func (m *EngagementConversationMessage) SetFrom(value EngagementIdentitySetable)() {
    err := m.GetBackingStore().Set("from", value)
    if err != nil {
        panic(err)
    }
}
// SetLastModifiedDateTime sets the lastModifiedDateTime property value. The date and time when message was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
func (m *EngagementConversationMessage) SetLastModifiedDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)() {
    err := m.GetBackingStore().Set("lastModifiedDateTime", value)
    if err != nil {
        panic(err)
    }
}
// SetReactions sets the reactions property value. A collection of reactions (such as like and smile) that users have applied to this message.
func (m *EngagementConversationMessage) SetReactions(value []EngagementConversationMessageReactionable)() {
    err := m.GetBackingStore().Set("reactions", value)
    if err != nil {
        panic(err)
    }
}
// SetReplies sets the replies property value. A collection of messages that are replies to this message and form a threaded discussion.
func (m *EngagementConversationMessage) SetReplies(value []EngagementConversationMessageable)() {
    err := m.GetBackingStore().Set("replies", value)
    if err != nil {
        panic(err)
    }
}
// SetReplyTo sets the replyTo property value. The parent message to which this message is a reply, if it is part of a reply chain.
func (m *EngagementConversationMessage) SetReplyTo(value EngagementConversationMessageable)() {
    err := m.GetBackingStore().Set("replyTo", value)
    if err != nil {
        panic(err)
    }
}
// SetReplyToId sets the replyToId property value. The ID of the parent message to which this message is a reply, if applicable.
func (m *EngagementConversationMessage) SetReplyToId(value *string)() {
    err := m.GetBackingStore().Set("replyToId", value)
    if err != nil {
        panic(err)
    }
}
type EngagementConversationMessageable interface {
    Entityable
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetBody()(ItemBodyable)
    GetConversation()(EngagementConversationable)
    GetCreatedDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)
    GetCreationMode()(*EngagementCreationMode)
    GetFrom()(EngagementIdentitySetable)
    GetLastModifiedDateTime()(*i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)
    GetReactions()([]EngagementConversationMessageReactionable)
    GetReplies()([]EngagementConversationMessageable)
    GetReplyTo()(EngagementConversationMessageable)
    GetReplyToId()(*string)
    SetBody(value ItemBodyable)()
    SetConversation(value EngagementConversationable)()
    SetCreatedDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)()
    SetCreationMode(value *EngagementCreationMode)()
    SetFrom(value EngagementIdentitySetable)()
    SetLastModifiedDateTime(value *i336074805fc853987abe6f7fe3ad97a6a6f3077a16391fec744f671a015fbd7e.Time)()
    SetReactions(value []EngagementConversationMessageReactionable)()
    SetReplies(value []EngagementConversationMessageable)()
    SetReplyTo(value EngagementConversationMessageable)()
    SetReplyToId(value *string)()
}
